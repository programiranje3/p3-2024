"""Domain classes and functions related to the concept of musician
"""


#%%
# Setup / Data

from util import utility
from music.enums import Vocals, Instrument
# import json

# from testdata.musicians import *                # no, it makes a circular definition of Musician


#%%
class Musician:
    """The class describing the concept of musician.
    It is assumed that a musician is sufficiently described by their
    name and whether they are a solo musician or a member of a band.

    This class illustrates some important concepts of Python classes:
    - self
    - __init__()
    - __str__()
    - __eq__(self, other) is the equivalent of Java equals() and should be overridden in classes
    - __dict__ attribute of all objects
    - data fields (instance variables)
    - methods - calling them by self.<method>(...) from the same class where they are defined
    """

    def __init__(self, name, is_band_member=True):
        self.name = name
        self.is_band_member = is_band_member

        # self.__n = 'lll'                                    # 'private' field
        # self._m = 'mmm'
        # self.__immutable_property = 'I am immutable'

    def __str__(self):
        return f'{self.name}, {"band member" if self.is_band_member else "solo musician"}'

    def __eq__(self, other):
        return self.__dict__ == other.__dict__ if isinstance(other, Musician) else False

    # Properties: 'private' fields/attributes:
    #   @property
    #   def <attr>(self):
    #       """ The docstring for <attr> must go here."""
    #       return self.__<attr>
    #   @<attr>.setter
    #   def <attr>(self, <attr>):
    #       self.__<attr> = <attr> if ... else ...
    #   @<attr>.deleter
    #   def <attr>(self, <attr>):
    #       del self.__<attr>

    # Properties allow programmers to create methods that behave like attributes.
    # With properties, one can change how they compute the target attribute whenever they need to do so.
    # A more detailed explanation: https://realpython.com/python-property/.
    # In general, avoid turning attributes that donâ€™t require extra processing into properties.
    # Using properties in those situations can make the code unnecessarily verbose, confusing and slower
    # than code based on regular attributes.

    # Make name a property (after setting up __init__(), __str__(), __eq__(), methods,...)

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        self.__name = name if isinstance(name, str) else 'unknown'

    # Run setters and getters in the debugger

    # @property
    # def name(self):
    #     pass
    #
    # @name.setter
    # def name(self, name):
    #     pass

    # # Add an immutable property (no setter for it)
    # @property
    # def immutable_property(self):
    #     return self.__immutable_property

    def play(self, song_title, *args, **kwargs):
        """Assumes that song_title, *args (expressions of gratitude) and kwargs.values() (messages) are strings.
        Prints song_title, rhythm counts, expressions of gratitude and messages. A call example:
            <musician>.play(song_title, *['Thank you!', 'You're wonderful!], love='We love you!')
        Convention: if rhythm count is provided, it is passed as rhythm_count='...' and is the first kwarg.
        """

        t = song_title if isinstance(song_title, str) else 'unknown song'
        g = ' '.join([str(a) for a in args]) if args else ''
        r = ''
        if kwargs and 'rhythm_count' in kwargs.keys():
            r = str(kwargs['rhythm_count'])
            del kwargs['rhythm_count']
        m = ' '.join([str(v) for v in kwargs.values()]) if kwargs else ''

        return f'{self.name} playing {t}: {r} ...playing... {g} {m}'

    def play_song(self, song_title, *args, **kwargs):
        """Demonstrates calling another method from the same class (self.<method>(...) as a mandatory syntax).
        """

        return self.play(song_title, *args, **kwargs)

    # Alternative constructor
    @classmethod
    def from_str(cls, musician_string):
        """Inverted __str__() method.
        Assumes that musician_string is in the format generated by __str__().
        """

        # f'{self.name}, {"band member" if self.is_band_member else "solo musician"}'
        name, musician = musician_string.split(', ')
        is_band_member = True if musician.startswith('b') else False
        return cls(name, is_band_member)


#%%
# Print objects
billy_joe = Musician('Billy Joe Armstrong')
print(billy_joe)
print(billy_joe.name)


#%%
# Run setters and getters in the debugger
billy_joe = Musician('Billy Joe Armstrong')
print(billy_joe.name)
billy_joe.name = 'Billy Joe Armstrong'


#%%
# Compare objects
billy_joe = Musician('Billy Joe Armstrong')
print(billy_joe == Musician('Billy Joe Armstrong'))


#%%
# Access data fields/attributes (instance variables),
# including 'private' ones (<object>._Musician__n), 'protected' ones (<object>._Musician__m) and
# immutable ones (<object>.immutable_property)

# billy_joe = Musician('Billy Joe Armstrong')
# print(billy_joe._Musician__n)
# print(billy_joe._m)
# print(billy_joe.immutable_property)


#%%
# Add new data fields (instance variables)
#   1. <object>.<new_attr> = <value>
#   2. <object>.__setattr__('<new_attr>', <value>)      # counterpart: <object>.__getattribute__('<attr>')
#   3. setattr(<object>, '<new_attr>', <value>))        # counterpart: getattr(<object>, '<attr>')
billy_joe = Musician('Billy Joe Armstrong')
billy_joe.birth_year = 1972
print(billy_joe.birth_year)
print()
tre_cool = Musician('Tre Cool')
# print(tre_cool.birth_year)      # no, other objects of the same class don't get the new attribute automatically


#%%
# Calling methods
billy_joe = Musician('Billy Joe Armstrong')
print(billy_joe.play('Boulevard of Broken Dreams', *['Thank you!', 'Yeah!'],
                     rhythm_count='One, two, three, four!', goodbye='Goodbye!'))
print(billy_joe.play_song('Boulevard of Broken Dreams', *['Thank you!', 'Yeah!'],
                          rhythm_count='One, two, three, four!', goodbye='Goodbye!'))


#%%
# Demonstrate object data fields and methods (possibly in Python console)
# for some built-in classes (boolean, int, object,...)
# - True + 1
# - True.__int__()
# - (1).__class__.__name__
# - (1).__class__
# - o.__dir__()
# - o.__dir__
# - o.__dict__

# print(True + 1)
# print(True.__int__())
# print((1).__class__)
# print((1).__class__.__name__)
# print((1).__dir__())
# print(object.__dict__)


#%%
# Demonstrate object data fields and methods for Musician objects
billy_joe = Musician('Billy Joe Armstrong')
# print(billy_joe + 1)                            # no, unsupported operand types
# print(billy_joe.__int__())                      # no, 'Musician' object has no attribute '__int__'
print(billy_joe.__class__)
print(billy_joe.__class__.__name__)
print(billy_joe.__dir__())


#%%
# Demonstrate @classmethod (from_str())
billy_joe = Musician('Billy Joe Armstrong')
print(Musician.from_str(str(billy_joe)))


#%%
class Singer(Musician):
    """The class describing the concept of singer.
    It is assumed that a singer is sufficiently described as a Musician,
    with the addition of whether they are a lead or a background singer.

    Useful link (related to inheritance in Python):
    https://stackoverflow.com/questions/3394835/use-of-args-and-kwargs/3394902#3394902 (calling super() in constructors)
    """

    # # Version 1, no multiple inheritance; attrs of both superclass and subclass specified explicitly in __init__() -
    # # calling super().__init__(<superclass attrs>) first, then adding self.<specific attr> = <specific attr> lines
    # def __init__(self, name, vocals, is_band_member=True, ):
    #     super().__init__(name, is_band_member)
    #     self.vocals = vocals if isinstance(vocals, Vocals) else None

    # Version 2, with multiple inheritance; subclass attrs specified in __init__() explicitly, **kwargs for the rest -
    # calling super().__init__(**kwargs) first, then adding self.<specific attr> = <specific attr> lines
    def __init__(self, vocals=Vocals.LEAD_VOCALS, **kwargs):
        super().__init__(**kwargs)
        self.vocals = vocals if isinstance(vocals, Vocals) else None

    def __str__(self):
        return super().__str__() + '; ' + self.vocals.name.lower().replace('_', ' ')

    def __eq__(self, other):
        # Recommended if inheritance is involved
        # (https://stackoverflow.com/questions/390250/elegant-ways-to-support-equivalence-equality-in-python-classes):
        # if type(other) is type(self):
        #     return self.__dict__ == other.__dict__
        # return False
        return self.__dict__ == other.__dict__ if isinstance(other, Singer) else False

    def play(self, song_title, *args, **kwargs):
        """Overrides the play() method from superclass.
        In addition to printing song_title, expressions of gratitude and messages,
        it also prints an additional message in the end.
        A call example:
            <singer>.play(song_title, *['Thank you!', 'You're wonderful!], love='We love you!')
        Note that calling super().play() from this method should pass *args and **kwargs, not args and kwargs.
        Here's why: https://stackoverflow.com/a/31197973.
        """
        return super().play(song_title, *args, **kwargs) + '\nYeah!'

    def what_do_you_do(self):
        """Just a simple method to describe the concept of singer.
        """

        return f'I am {self.name} and I sing songs.'


#%%
class Songwriter(Musician):
    """The class describing the concept of songwriter.
    It is assumed that a songwriter is sufficiently described as a musician
    who writes songs and plays an instrument.
    """

    # # Version 1, no multiple inheritance; attrs of both superclass and subclass specified explicitly in __init__() -
    # # calling super().__init__(<superclass attrs>) first, then adding self.<specific attr> = <specific attr> lines
    # # def __init__(self, name, instrument, is_band_member=True):
    # def __init__(self, name, instrument, is_band_member=True):
    #     super().__init__(name, is_band_member)
    #     self.instrument = instrument if isinstance(instrument, Instrument) else None

    # # Version 2, with multiple inheritance; subclass attrs specified in __init__() explicitly, **kwargs for the rest -
    # # calling super().__init__(**kwargs) first, then adding self.<specific attr> = <specific attr> lines
    # def __init__(self, instrument=Instrument.RHYTHM_GUITAR, **kwargs):
    #     pass
    def __init__(self, instrument=Instrument.RHYTHM_GUITAR, **kwargs):
        super().__init__(**kwargs)
        self.instrument = instrument if isinstance(instrument, Instrument) else None

    def __str__(self):
        return super().__str__() + '; ' + self.instrument.name.lower().replace('_', ' ')

    def __eq__(self, other):
        # Recommended if inheritance is involved
        # (https://stackoverflow.com/questions/390250/elegant-ways-to-support-equivalence-equality-in-python-classes):
        # if type(other) is type(self):
        #     return self.__dict__ == other.__dict__
        # return False
        return self.__dict__ == other.__dict__ if isinstance(other, Songwriter) else False

    def what_do_you_do(self):
        """Just a simple method to describe the concept of songwriter.
        """

        return f'I am {self.name} and I write songs.'


#%%
# Demonstrate inheritance
# object class (like the Object class in Java; all classes inherit from object
#   try, e.g., list.__mro__ in the console)
#   object class defines object.__eq__(self, other) etc.
#   object.__ne__(self, other), the inverse of object.__eq__(self, other),
#   is provided by Python automatically once object.__eq__(self, other) is implemented

#%%
# # Demonstrate inheritance
# # Version 1 - no multiple inheritance
# billy_joe = Singer(name='Billy Joe Armstrong', vocals=Vocals.LEAD_VOCALS)
# print(billy_joe)
# print(Singer.__mro__)
# print(billy_joe == Singer(name='Billy Joe Armstrong', vocals=Vocals.LEAD_VOCALS))
# print()
# # billy_joe = Songwriter(name='Billy Joe Armstrong', instrument=Instrument.LEAD_GUITAR)
# # print(billy_joe)
# # print(billy_joe == Songwriter(name='Billy Joe Armstrong', instrument=Instrument.LEAD_GUITAR))
# # print(billy_joe.what_do_you_do())

#%%
# Demonstrate method overriding


#%%
class SingerSongwriter(Singer, Songwriter):
    """The class describing the concept of singer-songwriter.
    It is assumed that a singer-songwriter is sufficiently described as a Singer who is simultaneously a Songwriter.

    Useful links :
    https://stackoverflow.com/a/50465583/1899061 (designing classes (i.e. their __init__() methods) for multiple inh.)
    https://stackoverflow.com/a/533675/1899061 (mixins explained, and what good they are in multiple inheritance)
    """

    def __init__(self, **kwargs):
        # Calling super().__init__(**kwargs) is quite sufficient if there are no subclass-specific attrs
        super().__init__(**kwargs)

    def __str__(self):
        # Returning super().__str__() is quite sufficient if there is no need for adding something subclass-specific
        return super().__str__()

    def __eq__(self, other):
        # Recommended if inheritance is involved
        # (https://stackoverflow.com/questions/390250/elegant-ways-to-support-equivalence-equality-in-python-classes):
        # if type(other) is type(self):
        #     return self.__dict__ == other.__dict__
        # return False
        return self.__dict__ == other.__dict__ if isinstance(other, SingerSongwriter) else False

    def tell(self):
        """What if multiple inheritance requires calling a method with same method name
        from different paths (i.e., from different base classes)?
        E.g., class C(A, B) and both A and B implement a method with the same name m() in their own ways).
        In that case, call A's version like A.m(self), and B's version like B.m(self).
        """
        print(Singer.what_do_you_do(self))
        print(Songwriter.what_do_you_do(self))


#%%
# Demonstrate multiple inheritance and MRO.
# Make sure to read this first: https://stackoverflow.com/a/50465583/1899061 (especially Scenario 3).


#%%
# Demonstrate inheritance
# Version 2 - with multiple inheritance

print(SingerSongwriter.__mro__)
print()
bob = SingerSongwriter(name='Bob Dylan', vocals=Vocals.LEAD_VOCALS,
                       instrument=Instrument.RHYTHM_GUITAR, is_band_member=False)
print(bob)
# print()
# print(bob == SingerSongwriter(name='Bob Dylan', vocals=Vocals.LEAD_VOCALS,
#                               instrument=Instrument.RHYTHM_GUITAR, is_band_member=False))
print()

bob.tell()

#%%
# Demonstrate JSON encoding/decoding of simple data types.
# Refer to https://docs.python.org/3.3/library/json.html#encoders-and-decoders for details.

#%%
# Demonstrate JSON encoding/decoding of Musician objects

# Using the json_tricks module from the json-tricks external package (https://github.com/mverleg/pyjson_tricks).
# From the package documentation:
# The JSON string resulting from applying the json_tricks.dumps() function stores the module and class name.
# The class must be importable from the same module when decoding (and should not have changed).
# If it isn't, you have to manually provide a dictionary to cls_lookup_map when loading
# in which the class name can be looked up. Note that if the class is imported, then globals() is such a dictionary
# (so try loads(json, cls_lookup_map=glboals())).
# Also note that if the class is defined in the 'top' script (that you're calling directly),
# then this isn't a module and the import part cannot be extracted. Only the class name will be stored;
# it can then only be deserialized in the same script, or if you provide cls_lookup_map.
# That's why the following warning appears when serializing Band objects in this script:
# UserWarning: class <class '__main__.Musician'> seems to have been defined in the main file;
# unfortunately this means that it's module/import path is unknown,
# so you might have to provide cls_lookup_map when decoding.

#%%
# Single object
from json_tricks import loads, dumps
billy_joe = Musician('Billy Joe Armstrong')
billy_joe_json = dumps(billy_joe, indent=4)
print(billy_joe_json)
print()

billy_joe_restored = loads(billy_joe_json)
print(billy_joe_restored)

#%%
# List of objects
from json_tricks import loads, dumps
billy_joe = Musician('Billy Joe Armstrong')
bob = SingerSongwriter(name='Bob Dylan', vocals=Vocals.LEAD_VOCALS,
                       instrument=Instrument.RHYTHM_GUITAR, is_band_member=False)
musicians_json = dumps([billy_joe, bob], indent=4)
print(musicians_json)
print()

musicians_restored = loads(musicians_json)
for m in musicians_restored:
    print(m)
